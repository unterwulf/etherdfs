
                   ETHERDFS - THE ETHERNET DOS FILE SYSTEM
                       http://etherdfs.sourceforge.net


                +---------[ WARNING: BETA SOFTWARE ]---------+
                | This software is currently in beta state.  |
                | Do not expect consistency. Testing purpose |
                | only!                                      |
                +--------------------------------------------+


EtherDFS is an 'installable filesystem' TSR for DOS. It maps a drive from a
remote computer (typically Linux-based) to a local drive letter, using raw
ethernet frames to communicate. For years, I was using LapLink to transfer
files between my various "retro" computers. It works, yes, but it's also
annoyingly slow and requires constant attention. One day I thought, "Wouldn't
it be amazing if all my PCs could share a common network drive, similarly to
how NFS operates in the *nix world?". This day EtherDFS was born. I clearly
didn't invent anything - the concept has been around almost as long as the
first IBM PC, and several commercial products addressed that need in the past.
I am not aware, however, of any free and open-source solution.

EtherDFS is the "client" part, ie. the TSR running on the client DOS computer.
The solution requires an EtherSRV instance to communicate with. Currently, an
implementation of EtherSRV exists only for Linux (ethersrv-linux).

Since EtherDFS runs over raw ethernet, it doesn't need any TCP/IP stack. It
only requires a working packet driver. The catch of using raw ethernet frames
is that EtherDFS is unable to communicate outside of a single LAN.

Syntax:
  etherdfs SRVMAC rdrive-ldrive [options]

  where:
  SRVMAC  is the MAC address of the file server EtherDFS will connect to. You
          can also use '::' so EtherDFS will try to auto-discover the server
          present in your LAN.
  rdrive  is the remote drive you want to access on the EtherSRV server.
  ldrive  is a local drive letter where the remote filesystem will be mapped.

Available options:
  /p=XX   use the network packet driver XX (autodetected in the range 60h..80h
          if not specified)
  /q      quiet mode: print nothing on screen if loaded successfully

Examples:
  etherdfs 6d:4f:4a:4d:49:52 C-F /q
  etherdfs :: C-X /p=80

Note: all arguments passed to EtherDFS are case-insensitive.


===[ Requirements ]===========================================================

EtherDFS hardware/software requirements:
 - An 8086/8088 compatible CPU
 - MS-DOS 5.0+ or compatible
 - 8 KiB of available conventional memory
 - An Ethernet interface and its packet driver

ethersrv, on the other hand, requires a reasonably modern Linux system.
Future versions will probably provide a DOS version of ethersrv, too.


===[ How to uninstall EtherDFS from memory ]==================================

EtherDFS cannot be removed from memory, nor disabled, sorry. This is a feature
that might perhaps be developed in future versions, but for now I do not
consider this a priority nor a feature essential to the common use case.


===[ Multiple drives ]========================================================

Currently EtherDFS can handle only a single drive. Future versions will be
enhanced to provide support for mapping multiple drives of the remote server.


===[ Can I use other networking software while EtherDFS is loaded? ]==========

EtherDFS provides low-level I/O disk connectivity through networking. As such,
it might be adviseable to dedicate a single network interface on your PC
solely for the purpose of handling EtherDFS communications - this would
provide the best possible performance and reliability. However, if your PC has
only one ethernet interface, you still can use EtherDFS simulteanously with
other networking applications - EtherDFS will happily share access to the
packet driver with any other applications, but in such case performance might
not be optimal. Take note that, for such network sharing to be possible, your
other networking software must be written in a way that does not require
exclusive control over the packet driver.


===[ Why Ethernet ]===========================================================

This is the first question I get whenever I introduce EtherDFS to someone:
"Why do you use stupid Ethernet instead of IP/UDP/IPv6/IPX/whatever ?"

I thought about the pros and cons of the multiple technical possibilities, and
the advantages of using raw Ethernet frames vastly outweighted the
constraints. It is to be noted that Ethernet is ubiquitious, has been for the
past 30 years, and is likely to stay here for a while. Here I paste my
"pros & cons" list, so my reasons should become clear.

Pros:
 - Very simple to parse and process = faster, lower memory footprint,
 - No dependencies: doesn't require any TCP/IP stack, only a packet driver,
 - Allows EtherDFS to share a single NIC with other DOS networking software,
 - IP-agnostic: the network can operate IPv4, IPv6, IPX, or anything else,
 - Makes it possible to auto-discover an EtherSRV server on the LAN.

Cons:
 - Unrouteable, meaning cannot work outside of a single LAN (running EtherDFS
   over a long-distance network would be unadviseable anyway for reliability
   and latency reasons).


===[ Is it secure? ]==========================================================

Shortly said: no. EtherDFS is designed by a hobbyist, for hobbyists. It is not
meant to be used in an environment where security is required. The EtherDFS
protocol transfers all data as plain text, and doesn't have any provisions for
authentication nor access control. It is worth noting that a potentially
desirable side effect of using raw Ethernet for communication is the fact that
EtherDFS data won't ever make it outside your LAN, simply because it is
unrouteable.


===[ But is it still safe for my data? ]======================================

Should be. I did my best to ensure that EtherDFS does not lead to any
corruption of data, or any other troubles. You have to keep in mind though,
that EtherDFS is a program that takes root deeply in the (often undocumented)
internals of DOS, and as such, is a quite complex beast. Besides, every
program has bugs, this one is surely not an exception. I can only recommend
that you perform periodic backups of your data, just in case.


===[ License ]================================================================

EtherDFS is distributed under the terms of the MIT License, as listed below.

Copyright (C) 2017 Mateusz Viste

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
